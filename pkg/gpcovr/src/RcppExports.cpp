// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// nsbasis
RcppGSL::Matrix nsbasis(RcppGSL::Vector X, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_nsbasis(SEXP XSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type X(XSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(nsbasis(X, knots));
    return rcpp_result_gen;
END_RCPP
}
// predict_natspl
RcppGSL::Vector predict_natspl(const RcppGSL::Matrix& basis, const RcppGSL::Vector& coefs);
RcppExport SEXP _gpcovr_predict_natspl(SEXP basisSEXP, SEXP coefsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RcppGSL::Matrix& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const RcppGSL::Vector& >::type coefs(coefsSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_natspl(basis, coefs));
    return rcpp_result_gen;
END_RCPP
}
// dlogspline_unnorm
RcppGSL::Vector dlogspline_unnorm(RcppGSL::Matrix basis, RcppGSL::Vector coefs, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_dlogspline_unnorm(SEXP basisSEXP, SEXP coefsSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Matrix >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogspline_unnorm(basis, coefs, knots));
    return rcpp_result_gen;
END_RCPP
}
// normalize_dlogspline
double normalize_dlogspline(RcppGSL::Matrix basis, RcppGSL::Vector coefs, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_normalize_dlogspline(SEXP basisSEXP, SEXP coefsSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Matrix >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_dlogspline(basis, coefs, knots));
    return rcpp_result_gen;
END_RCPP
}
// dlogspline
RcppGSL::Vector dlogspline(RcppGSL::Vector x, RcppGSL::Vector coefs, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_dlogspline(SEXP xSEXP, SEXP coefsSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type x(xSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogspline(x, coefs, knots));
    return rcpp_result_gen;
END_RCPP
}
// dloglogspline
RcppGSL::Vector dloglogspline(RcppGSL::Vector x, RcppGSL::Vector coefs, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_dloglogspline(SEXP xSEXP, SEXP coefsSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type x(xSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(dloglogspline(x, coefs, knots));
    return rcpp_result_gen;
END_RCPP
}
// get_slopes
RcppGSL::Vector get_slopes(RcppGSL::Vector coefs, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_get_slopes(SEXP coefsSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_slopes(coefs, knots));
    return rcpp_result_gen;
END_RCPP
}
// get_slope_pts
RcppGSL::Vector get_slope_pts(RcppGSL::Vector coefs, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_get_slope_pts(SEXP coefsSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_slope_pts(coefs, knots));
    return rcpp_result_gen;
END_RCPP
}
// plogspline
RcppGSL::Vector plogspline(RcppGSL::Vector x, RcppGSL::Vector coefs, RcppGSL::Vector knots);
RcppExport SEXP _gpcovr_plogspline(SEXP xSEXP, SEXP coefsSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type x(xSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(plogspline(x, coefs, knots));
    return rcpp_result_gen;
END_RCPP
}
// qlogspline
RcppGSL::Vector qlogspline(RcppGSL::Vector p, RcppGSL::Vector coefs, RcppGSL::Vector knots, double grid_size);
RcppExport SEXP _gpcovr_qlogspline(SEXP pSEXP, SEXP coefsSEXP, SEXP knotsSEXP, SEXP grid_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type p(pSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< double >::type grid_size(grid_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(qlogspline(p, coefs, knots, grid_size));
    return rcpp_result_gen;
END_RCPP
}
// rlogspline
RcppGSL::Vector rlogspline(int n, RcppGSL::Vector coefs, RcppGSL::Vector knots, double grid_size);
RcppExport SEXP _gpcovr_rlogspline(SEXP nSEXP, SEXP coefsSEXP, SEXP knotsSEXP, SEXP grid_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< double >::type grid_size(grid_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(rlogspline(n, coefs, knots, grid_size));
    return rcpp_result_gen;
END_RCPP
}
// fitsplinecpp
List fitsplinecpp(int B, arma::vec y, arma::mat spl, int burnin, arma::vec initBeta, double initSigma, double initTau, arma::vec initBetaTune, double initSigmaTune, double initTauTune, double s_a, double s_b, double t_a, double t_b, double c0, double c1, double k, double r, double oar, bool progress);
RcppExport SEXP _gpcovr_fitsplinecpp(SEXP BSEXP, SEXP ySEXP, SEXP splSEXP, SEXP burninSEXP, SEXP initBetaSEXP, SEXP initSigmaSEXP, SEXP initTauSEXP, SEXP initBetaTuneSEXP, SEXP initSigmaTuneSEXP, SEXP initTauTuneSEXP, SEXP s_aSEXP, SEXP s_bSEXP, SEXP t_aSEXP, SEXP t_bSEXP, SEXP c0SEXP, SEXP c1SEXP, SEXP kSEXP, SEXP rSEXP, SEXP oarSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type spl(splSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initBeta(initBetaSEXP);
    Rcpp::traits::input_parameter< double >::type initSigma(initSigmaSEXP);
    Rcpp::traits::input_parameter< double >::type initTau(initTauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initBetaTune(initBetaTuneSEXP);
    Rcpp::traits::input_parameter< double >::type initSigmaTune(initSigmaTuneSEXP);
    Rcpp::traits::input_parameter< double >::type initTauTune(initTauTuneSEXP);
    Rcpp::traits::input_parameter< double >::type s_a(s_aSEXP);
    Rcpp::traits::input_parameter< double >::type s_b(s_bSEXP);
    Rcpp::traits::input_parameter< double >::type t_a(t_aSEXP);
    Rcpp::traits::input_parameter< double >::type t_b(t_bSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type oar(oarSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fitsplinecpp(B, y, spl, burnin, initBeta, initSigma, initTau, initBetaTune, initSigmaTune, initTauTune, s_a, s_b, t_a, t_b, c0, c1, k, r, oar, progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpcovr_nsbasis", (DL_FUNC) &_gpcovr_nsbasis, 2},
    {"_gpcovr_predict_natspl", (DL_FUNC) &_gpcovr_predict_natspl, 2},
    {"_gpcovr_dlogspline_unnorm", (DL_FUNC) &_gpcovr_dlogspline_unnorm, 3},
    {"_gpcovr_normalize_dlogspline", (DL_FUNC) &_gpcovr_normalize_dlogspline, 3},
    {"_gpcovr_dlogspline", (DL_FUNC) &_gpcovr_dlogspline, 3},
    {"_gpcovr_dloglogspline", (DL_FUNC) &_gpcovr_dloglogspline, 3},
    {"_gpcovr_get_slopes", (DL_FUNC) &_gpcovr_get_slopes, 2},
    {"_gpcovr_get_slope_pts", (DL_FUNC) &_gpcovr_get_slope_pts, 2},
    {"_gpcovr_plogspline", (DL_FUNC) &_gpcovr_plogspline, 3},
    {"_gpcovr_qlogspline", (DL_FUNC) &_gpcovr_qlogspline, 4},
    {"_gpcovr_rlogspline", (DL_FUNC) &_gpcovr_rlogspline, 4},
    {"_gpcovr_fitsplinecpp", (DL_FUNC) &_gpcovr_fitsplinecpp, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpcovr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
